There are eight congestion control functions that you
need to define. There are some that you may be
able to reuse:

void (*sctp_set_initial_cc_param)(struct sctp_tcb *stcb, struct sctp_nets *net);

This function is what happens initially. It is passed the the net structure
(found in sctp_structs.h) and you are expected to initialize the
cwnd/ssthresh etc for the network. It is called normally when a
peer address is added (association startup or new addresses dynamically
added with asconf's).

void (*sctp_cwnd_update_after_sack)(struct sctp_tcb *stcb,
			 	    struct sctp_association *asoc, 
 				    int accum_moved , int reneged_all, int will_exit);

This function is called after a sack as been processed. The net's structures
that reside on the assoc (its a tailq of nets), will have been updated
with what has been updated net->net_ack tells you how many bytes to
this dest was ack'd. net->net_ack2 tells you how many of those bytes
were never retransmitted. accum_moved is true if the cum-ack moved. reneged_all
is true if the peer did a reneg of all previously gap-acked blocks. will_exit is
true if the association exits fast recovery at the end of this sack processing.


void (*sctp_cwnd_update_after_fr)(struct sctp_tcb *stcb,
				  struct sctp_association *asoc);

This is called whenever a fast retransmit is preformed. Note that
the variable asoc->fast_retran_loss_recovery is true if the 
association has already seen a fast retransmit and is in fast
recovery (multiple fast retransmits in the same window of data). Thats
what the will_exit flag (for sctp_cwnd_update_after_sack) indicates will
be cleared at the end of the sack processing.

void (*sctp_cwnd_update_after_timeout)(struct sctp_tcb *stcb,
 			               struct sctp_nets *net);

This function is called when a timeout occurs on a destination
net.

void (*sctp_cwnd_update_after_ecn_echo)(struct sctp_tcb *stcb,
			               struct sctp_nets *net);

This function is called when a ECN Echo is recognized from the
peer regarding the destination net passed in.


void (*sctp_cwnd_update_after_packet_dropped)(struct sctp_tcb *stcb,
			                      struct sctp_nets *net, 
                                              struct sctp_pktdrop_chunk *cp,
			                      uint32_t *bottle_bw, uint32_t *on_queue);

Packet drop's are recieved from either routers or peers. A packet drop from
a peer with NO data indicates that its a bandwidth report. For satellite
networks an appropriate up or down cwnd adjustment should be made. For
cases where the router drops a packet due to errors, then the packet should
be setup to retransmit.


void (*sctp_cwnd_update_after_output)(struct sctp_tcb *stcb,
			             struct sctp_nets *net, int burst_limit);

This function is really titled incorrectly. Basically its called BEFORE
output so that micro-burst control can be done by adjusting the cwnd.
It is only called if the sctp_use_cwnd_based_maxburst is enabled (the default)
if its not enabled, then the output routine does counting of sends and
limits micro-bursts this way... note that we may need to think about changing
micro burst managment into actually not playing with the cwnd and instead
starting a timer when we send max_burst packets... to help us send more.


void (*sctp_cwnd_update_after_fr_timer)(struct sctp_inpcb *inp, 
 			                struct sctp_tcb *stcb, struct sctp_nets *net);

This function is called when an "early fast retransmit" timer goes off. This
timer runs when we have a low amount of data outstanding and we may
not get a "3rd" strike. If it goes off fast retransmit what needs to
be sent using more cwnd space. Note that this code is experimental and
disabled by default.


So when you add new cc function you can probably reuse the existing:
-------------------------------
sctp_cwnd_update_after_fr_timer
sctp_cwnd_update_after_output
sctp_cwnd_update_after_packet_dropped 

You may want to redefine:
-------------------------
sctp_cwnd_update_after_ecn_echo

And you will want to define your:
---------------------------------
sctp_cwnd_update_after_timeout
sctp_cwnd_update_after_fr
sctp_cwnd_update_after_sack
sctp_set_initial_cc_param
