
sctp_addr_change(ifa, cmd) called [system dependant]
 find vrf
 add or delete from "non-dependant" master list
 build wi.
 enqueue to address work
 start timer
done


Timer Expires
sctp_handle_timeout calls.
 sctp_handle_addr_wq
  lock
  get first one
  remove it
  if(list not empty)
   start timer
  if add
    call sctp_add_ip_address(ifa)
  else if del
    call sctp_delete_ip_address(ifa)
  free the entry
done

sctp_add_ip_address()
 - Call sctp_addr_mgmt(ifa, add, vrf)
done

sctp_delete_ip_address()
 - Call sctp_addr_mgmt(ifa, del, vrf)
 info lock
 for e
   lock e
   for each asoc
     for each net
       purge route entry if needed
       clear src addr if needed.
     end
   end
   look through ep list (specific bound)
     if find our ifa remove laddr.
   unlock e
  end
 info unlock
done

sctp_addr_mgmt
 for each e
   if(auto on)
    sctp_addr_mgmt_ep(inp, ifa, type)
   else 
     if del return
     sctp_addr_mgmt_restrict_ep(inp, ifa)
   end
 end
done

sctp_addr_mgmt_restrict_ep()
if (not boundall)
  return
lock e
 for each asoc 
  lock
  add_local_addr_assoc(to restricted)
  unlock
 done
unlock e
done

sctp_addr_mgmt_ep(inp, ifa, type)
 lock inp
 validate this ep can operate on type of addr
   NOTE: bug, why the check for deprecated (sure
         can't add but why would we not delete
         one that had become deprecated?)
 if boundall
  if(asconf inp feature off)
    if delete
      sctp_del_local_addr_ep()
      unlock
      return
    end
  else subset bound
      if(add)
        sctp_add_local_addr_ep()
      else
        sctp_del_local_addr_ep()
  done
  for each assoc
    lock tcb
    sctp_addr_mgmt_assoc()
    unlock
  done
done



sctp_add_local_addr_ep()
  sctp_pcb.c goes through for non boundall case
  and verify's its not in the ep. If so it
  builds and inserts a ep address in ep list. Assumes ep lock
  is in place.


sctp_del_local_addr_ep() --

  sctp_pcb.c goes through and finds addr in
             bound specific case. (assumes ep lock)
             if count of addr > 1 we will
             free any assoc with routes that
             point to the ifa AND call remove_laddr
             which removes it from the ll and frees.

sctp_addr_mgmt_assoc()
  if not boundall and asconf feature off
   return
  not af_inet/af_inet6
   return
  validate we are allowed to act on this
  v6 address (note same problem with detached).

  if add
    add to the do-not use list (call sctp_add_local_addr_asoc
                                with flags)

  verify addr is in scope if not return

  if feature on (auto-asconf)
    if peer supports acconf
       call queue asconf
       if it worked and ok
          start timer
       done
    done
  done
done
